local PG_Request   = require("pegasus.request")
local PG_Response  = require("pegasus.response")

local copas        = require("copas")
local socket       = require("socket")

local finalhandler = require("express.misc.finalhandler")
local methods      = require("express.misc.methods")

local dprint       = require("express.utils").debugPrint

local unpack = unpack or table.unpack


local APP_MT = {}
APP_MT.__index = APP_MT

function APP_MT:init()
	-- self.cache = {} -- —Ç–æ–ª—å–∫–æ –¥–ª—è self:render()
	-- self.engines = {}
	self.settings = {}

	self:defaultConfiguration();
end

function APP_MT:defaultConfiguration()
	local env = os.getenv("LUA_ENV") or "development"

	self:enable("x-powered-by")

	dprint("booting in " .. env .. " mode")

	self.mountpath = "/" -- pegasus:new{location = "/"}

	self.locals = {} -- #todo —á—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º? –ü—Ä–æ—Å—Ç–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ª—é–¥–µ–π?
	self.locals.settings = self.settings -- —Ç–æ–≥–¥–∞ —ç—Ç–æ –∑–∞—á–µ–º?

	-- // default configuration
	-- this.set('view', View);
	-- this.set('views', resolve('views'));
	-- this.set('jsonp callback name', 'callback');

	if env == "production" then
		self:enable("view cache") -- #todo –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ?
	end
end

local ROUTER_MT = require("express.router")

-- local function setPrototypeOf(obj, prototype)
-- 	local mt = getmetatable(obj) or {}
-- 	mt.__index = prototype
-- 	setmetatable(obj, mt)
-- end

function APP_MT:lazyrouter()
	if not self._router then
		self._router = ROUTER_MT({
			-- caseSensitive = -- #todo
			-- strict =
		})

		-- self._router:use(function(req, res, next) -- #todo self:get("query parser fn")
		-- 	req.query = self.pegasus_res.querystring
		-- 	next()
		-- end)
		self._router:use(function(req, res, next)
			if self:enabled("x-powered-by") then res:addHeader("X-Powered-By", "LuaExpress") end -- #todo –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –µ—â–µ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü—ã, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ –æ—Ç pegasus. –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∏–∂–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å :set –¥–ª—è —Ö–µ–¥–µ—Ä–∞

			req.res = res -- –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ res –∏–∑–Ω—É—Ç—Ä–∏ req. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–µ–¥–µ—Ä–∞ Etag –∏ Last-Modified (—Å–∞–º –Ω–µ –ø–æ–Ω—è–ª)
			res.req = req -- –ù–∞–ø—Ä–∏–º–µ—Ä, if req.method == HEAD: dontSendBody()
			req.next = next

			-- setPrototypeOf(req, self.request)
			-- setPrototypeOf(res, self.response)

			local req_mt = getmetatable(req)
			local res_mt = getmetatable(res)
			setmetatable(req_mt, {__index = self.request}) -- —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü—É –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
			setmetatable(res_mt, {__index = self.response})

			-- res.locals = {} -- #todo –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –≤—Ä–æ–¥–µ

			next()
		end)
	end
end

function APP_MT:handle(req, res, callback)
	local router = self._router

	local done = callback or finalhandler(req, res, {
		onerror = function(err) -- './pega/application.lua:81: attempt to index field 'pegasus_res' (a nil value)'
			dprint("express –æ—à–∏–±–∫–∞:", err)
		end
	})

	if not router then
		dprint("No routes defined on app")
		done()
		return
	end

	router:handle(req, res, done)
end

local handleMiddleware = function(fn)
	return function(req, res, next)
		local orig = req.app -- #todo req.app —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω?
		fn(req, res, function(err)
			setmetatable(req, { __index = orig.request }) -- #todo –≤—Ä–æ–¥–µ —É–±—Ä–∞–ª –∏–∑ express.lua –∏ –Ω–∏–∂–Ω–µ–µ
			setmetatable(res, { __index = orig.response })
			next(err)
		end)
	end
end

-- #todo —Ñ—É–Ω–∫—Ü–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å—ã—Ä–∞—è –∏ –∫–∞–∂–µ—Ç—Å—è, –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
function APP_MT:use(path, ...)
	local fns = {...}

	if type(path) == "function" then
		fns = {path, ...} -- #todo –±—É–¥—É—Ç –ª–∏ —Ç—É—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∏ —Ç–æ—á–∫–∏?
		path = "/"
	end

	assert(fns[1], "app:use() requires a middleware function")

	self:lazyrouter()
	local router = self._router

	for _, fn in ipairs( fns ) do
		-- app:use( express() )
		if type(fn) == "table" and fn.handle and fn.set then -- #todo —á—Ç–æ –∑–∞ .set ? –ï–≥–æ –≤ —Ä–æ—É—Ç–µ—Ä–µ –Ω–µ—Ç –∏ –≤–æ–æ–±—â–µ –≤ express –Ω–µ –Ω–∞—Ö–æ–∂—É
			local app = fn
			dprint("APP_MT:use app under " .. path)
			app.mountpath = path
			app.parent = self

			router:use(path, handleMiddleware(app))

			setmetatable(app.request,  {__index = self.request})
			setmetatable(app.response, {__index = self.response})
			setmetatable(app.engines,  {__index = self.engines})
			setmetatable(app.settings, {__index = self.settings})
		else
			local fnn = type(fn) == "table" and function(...) return fn:handle(...) end or fn -- router –≤ app:use. #todo –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ —Ç–∞–º –ø–æ —Å—É—Ç–∏ __call –≤ —Ä–æ—É—Ç–µ—Ä–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫ –∂–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ lua —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–æ –Ω–µ –æ–±—ä–µ–∫—Ç
			router:use(path, fnn)
		end
	end


	return self
end

function APP_MT:route(path)
	self:lazyrouter()
	return self._router:route(path)
end

-- function APP_MT:engine() end

-- #todo –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ name == table (–º–Ω–æ–∂–µ—Å—Ç–≤–æ)
-- #note –æ—á–µ–Ω—å(!) –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è —à—Ç—É–∫–∞.
-- https://expressjs.com/en/5x/api.html#app.param
function APP_MT:param(name, fn)
	self:lazyrouter()
	self._router:param(name, fn)
	return self
end

function APP_MT:set(setting, value)
	dprint("set " .. tostring(setting) .. " to " .. tostring(value))
	self.settings[setting] = value
	return self
end

-- #todo –ø—Ä–æ–ø–∏—Å–∞–Ω–æ –≤ ipairs(methods). –ú–¥–∞
-- function APP_MT:get(setting) return self.settings[setting] end

function APP_MT:path()
	return self.parent and (self.parent:path() .. self.mountpath) or ""
end

function APP_MT:enabled(setting)
	return not not self:get(setting)
end

-- #todo –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å –ø–æ –Ω–µ–Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏? –ì–ª—É–ø–æ –∂–µ
function APP_MT:disabled(setting)
	return not self:get(setting)
end

-- #todo –ø–æ—É–¥–∞–ª—è—Ç—å –≤—Å–µ —ç—Ç–∏ enable, enabled, disabled. –í –∫–æ–¥–µ —Ç–æ–∂–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —é–∑–∞–µ—Ç—Å—è. –û—Å—Ç–∞–≤–∏—Ç—å :set. –í –∑–∞–º–µ—Ç–∫–∞—Ö –ø—Ä–æ luaexpress —Ç–∞–∫ –∏ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ–≥–æ –≥–æ–≤–Ω–∏—â–∞ –Ω–µ—Ç
function APP_MT:enable(setting)
	return self:set(setting, true)
end

-- omg
function APP_MT:disable(setting)
	return self:set(setting, false)
end

for _, method in ipairs( methods ) do
	-- express.handlers[method] = express.handlers[method] or {}

	-- --- app:get(path, callback), app:post, etc
	-- APP_MT[method] = function(self, path, callback)
	-- 	express.handlers[method][path] = callback
	-- 	return nil
	-- end

	APP_MT[method] = function(self, path, ...) -- ... is callbacks
		local callbacks = {...}

		-- #todo —É–±—Ä–∞—Ç—å –æ—Ç—Å—é–¥–∞ .get –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ .getsetting –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ .setting(name)
		if method == "get" and not callbacks[1] then -- app:get(setting_name)
			return self.settings[path]
		end

		self:lazyrouter()

		local route = self._router:route(path)
		-- #todo —Ç—É—Ç –Ω–µ —É–≤–µ—Ä–µ–Ω. –ù–∏–∂–µ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –¥–∞–ª—å—à–µ –º–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
		-- route[method].apply(route, slice.call(arguments, 1));
		-- PRINT({"APP_MT[method] = function..", callbacks = callbacks, path = path})
		route[method](route, unpack(callbacks)) -- pass self (apply)
		return self
	end
end

function APP_MT:all(path, ...) --- ... is callbacks
	self:lazyrouter()
	local route = self._router:route(path) -- #todo –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

	local cbs = {...}
	for _, method in ipairs(methods) do
		route[method](route, unpack( cbs ))
	end

	return self
end

-- #todo –º–∞—Å—Å–∏–≤–Ω–æ, —Å–µ–π—á–∞—Å –Ω–µ —Ö–æ—á—É —É–≥–ª—É–±–ª—è—Ç—å—Å—è
-- function APP_MT:render() end

-- #todo —Ç—É—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Å–∞–º–æ–≥–æ nodejs. –ü—Ä–∏—à–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
function APP_MT:listen(port, host, sslparams)
	host = host or "*"
	port = port or 3000

	-- sslparams = {
	-- 	wrap = {
	-- 		mode = "server",
	-- 		protocol = "any",
	-- 		key = "./pega/serverAkey.pem",
	-- 		certificate = "./pega/serverA.pem",
	-- 		cafile = "./pega/rootA.pem",
	-- 		verify = {"none"},
	-- 		options = {"all", "no_sslv2", "no_sslv3", "no_tlsv1"},
	-- 	},
	-- 	sni = nil,
	-- },

	local server_sock, err = socket.bind(host, port)
	if not server_sock then
		return nil, "failed to create server socket; " .. tostring(err)
	end

	local server_ip, server_port = server_sock:getsockname()
	if not server_ip then
		return nil, "failed to get server socket name; " .. tostring(server_port)
	end

	copas.autoclose = false -- —á—Ç–æ–±—ã –æ—Ç next() –≤ –∫–æ–¥–µ –±—ã–ª —Å–º—ã—Å–ª. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://t.me/c/1473957119/169428
	copas.addserver(server_sock, copas.handler(function(client_sock)

		local req = PG_Request:new(port, client_sock) -- #todo –≤ –±—É–¥—É—â–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Å–∞–º express, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç pegasus. üî• –¢–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏ res:status –≤–º–µ—Å—Ç–æ :setstatus –≤–µ—Ä–Ω—É—Ç—å
		if not req:method() then client_sock:close() return end

		local writeHandler = {} -- _writeHandler, –∫–æ—Å—Ç—ã–ª—å –∏–∑-–∑–∞ –∫–æ–¥–∞ pegasus.lua (–µ–≥–æ —Ç–∞–º –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å)
		function writeHandler:processBodyData(body) return body end

		local res = PG_Response:new(client_sock, writeHandler)
		-- res.request = req -- #todo –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –≥–¥–µ-—Ç–æ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì —É–¥–∞–ª–∏—Ç—å. –í express –µ—Å—Ç—å res.req

		-- –ù—É–∂–Ω–æ –¥–ª—è express, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π nodejs
		req.url     = req:path() -- /bla/bla?kek=lol
		req.method  = req:method() -- GET/POST etc
		req.headers = req:headers() -- #todo –≤ node –æ–Ω–∏ lower-case, —Ç—É—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª. –ò –≤ express –≤—Ä–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –º–± –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
		-- res.headers = res._headers -- https://github.com/EvandroLG/pegasus.lua/blob/2a3f4671f45f5111c14793920771f96b819099ab/src/pegasus/response.lua#L103
		req.query   = req.querystring

		res:statusCode(200)
		-- res.headers = {}
		-- res:addHeader("Content-Type", "text/html")

		self:handle(req, res)
	end, sslparams))

	io.stderr:write("express.lua is up on " .. (sslparams and "https" or "http") .. "://" .. server_ip .. ":" .. server_port .. "/\n")

	return server_sock, nil
end

return APP_MT
